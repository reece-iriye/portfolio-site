# Upstream definition for the HTMX server
upstream htmx_backend {
    server htmx-portfolio:8080;
    keepalive 32;
}

# HTTP to HTTPS redirect
server {
    listen 80;
    server_name reeceiriye.me;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    
    return 301 https://$server_name$request_uri;
}

# Main HTTPS server
server {
    listen 443 ssl http2;
    server_name reeceiriye.me;

    # SSL Configuration with your Cloudflare certificates
    ssl_certificate /etc/ssl/cloudflare-root.crt;
    ssl_certificate_key /etc/ssl/cloudflare-root.key;
    
    # Modern SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    
    # OCSP stapling
    ssl_stapling off;
    ssl_stapling_verify off;

    # Security headers
    add_header Strict-Transport-Security "max-age=63072000" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;

    # Root and index
    root /app;
    index index.html;

    # Logging
    access_log /var/log/nginx/reeceiriye.me.access.log main;
    error_log /var/log/nginx/reeceiriye.me.error.log warn;

    # Static files with high rate limits and caching
    location /static/ {
        alias /app/static/;
        
        # Rate limiting for static files
        limit_req zone=static_limit burst=50 nodelay;
        
        # Caching headers
        expires 1d;
        add_header Cache-Control "public, max-age=86400";
        add_header Vary "Accept-Encoding";
        
        # Security headers for static content
        add_header X-Content-Type-Options "nosniff" always;
        
        # Enable gzip for static files
        location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }

    # API endpoints with normal rate limits (60 requests per minute)
    location ~ ^/api/(home|work-history|metrics|contact-me)$ {
        limit_req zone=api_limit burst=20 nodelay;
        
        proxy_pass http://htmx_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # Health check headers
        proxy_connect_timeout 5s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Buffer settings
        proxy_buffering on;
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;
    }

    # Contact endpoint with strict rate limiting (1 request per minute)
    location = /api/contact {
        limit_req zone=contact_limit burst=2 nodelay;
        
        proxy_pass http://htmx_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # Health check headers
        proxy_connect_timeout 5s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # Root path - redirect to /api/home
    location = / {
        limit_req zone=api_limit burst=20 nodelay;
        
        proxy_pass http://htmx_backend/api/home;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # Health check headers
        proxy_connect_timeout 5s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # Pretty URLs - anything that doesn't match /api/* or /static/* gets /api/ prepended
    location / {
        # Skip if it's already an API or static request
        if ($uri ~ ^/(api|static)/) {
            break;
        }
        
        limit_req zone=api_limit burst=20 nodelay;
        
        # Rewrite to prepend /api
        rewrite ^/(.*)$ /api/$1 break;
        
        proxy_pass http://htmx_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # Health check headers
        proxy_connect_timeout 5s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /50x.html {
        root /usr/share/nginx/html;
    }
    
    location = /404.html {
        root /usr/share/nginx/html;
    }
}
