---
version: "3"
services:
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    restart: unless-stopped
    env_file:
      - ./grafana/.env
    volumes:
      - ./grafana:/etc/grafana/provisioning/datasources

  nginx:
    build:
      context: $PWD/nginx
      dockerfile: Containerfile
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - $PWD/nginx/logs:/var/log/nginx
    depends_on:
      - htmx-server
      - grafana
      - prometheus
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:1.4
    container_name: nginx-exporter
    restart: unless-stopped
    command:
      - "--nginx.scrape-uri=http://nginx:8080/stub_status"
    ports:
      - "9113:9113"
    depends_on:
      - nginx

  node-exporter:
    image: prom/node-exporter:v1.9.1
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($|/)'
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9100/metrics || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  cadvisor:
    image: bitnami/cadvisor:0.53.0-debian-12-r9
    container_name: cadvisor
    restart: unless-stopped
    ports:
      - "8081:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  htmx-server:
    build:
      context: ./htmx
      dockerfile: Containerfile
    container_name: htmx-portfolio
    ports:
      - "8080:8080"
    env_file:
      - ./htmx/.env
